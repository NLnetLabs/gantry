# VENDOR=NLnet Labs
# DROPLET_SIZE=s-1vcpu-1gb
- hosts: rpkicaches
  tasks:
  - block:
    - name: "INSTALL PYTHON FOR ANSIBLE"
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      register: result
      changed_when: result.stdout != ""

  - block:
    - name: "CREATE THE TALS DOCKER VOLUME"
      raw: docker volume create routinator_tals

    - name: "RUN THE ROUTINATOR DOCKER CONTAINER TO CREATE THE TALS"
      register: result
      docker_container:
        name: routinator
        image: nlnetlabs/routinator:latest
        command: init -f --accept-arin-rpa
        auto_remove: yes
        volumes:
          - routinator_tals:/home/routinator/.rpki-cache/tals

    - name: "RUN THE ROUTINATOR DOCKER CONTAINER ON THE ROUTINATOR HOST DOCKER DAEMON"
      register: result
      docker_container:
        name: routinator
        image: nlnetlabs/routinator:latest
        network_mode: host
        volumes:
          - routinator_tals:/home/routinator/.rpki-cache/tals

    - name: "CHECK THAT THE ROUTINATOR IS DEPLOYED"
      assert: { that: "result.ansible_facts.docker_container.State.Running" }

    - name: "WAIT FOR ROUTINATOR TO START LISTENING FOR CONNECTIONS"
      wait_for:
        host: "{{ hostvars['routinator'].ansible_host }}"
        port: "{{ routinator_port }}"
        state: started         # Port should be open
        delay: 0               # No wait before first check (sec)
        timeout: 600           # Stop checking after timeout (sec)
    connection: local
    environment:
      DOCKER_CERT_PATH: "{{ hostvars['routinator'].dm_DOCKER_CERT_PATH }}"
      DOCKER_HOST: "{{ hostvars['routinator'].dm_DOCKER_HOST }}"
      DOCKER_MACHINE_NAME: "{{ hostvars['routinator'].dm_DOCKER_MACHINE_NAME }}"
      DOCKER_TLS_VERIFY: "{{ hostvars['routinator'].dm_DOCKER_TLS_VERIFY }}"

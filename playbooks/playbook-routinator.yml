# DROPLET_SIZE=s-1vcpu-1gb
- any_errors_fatal: yes
  hosts: rpkicaches
  tasks:
  - block:
    - name: "ON RPKICACHE {{ inventory_hostname }} @ {{ ansible_host }}: Install Python for Ansible"
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      register: result
      changed_when: result.stdout != ""

    - name: "ON RPKICACHE {{ inventory_hostname }} @ {{ ansible_host }}: Create the tals directory"
      file:
        path: /etc/routinator/tals
        state: directory

    - name: "ON RPKICACHE {{ inventory_hostname }} @ {{ ansible_host }}: Download the tal file"
      get_url:
        url: https://www.arin.net/resources/manage/rpki/arin-rfc7730.tal
        dest: /etc/routinator/tals/arin-rfc7730.tal

    - name: "ON RPKICACHE {{ inventory_hostname }} @ {{ ansible_host }}: Check tal file exists"
      stat:
        path: /etc/routinator/tals/arin-rfc7730.tal
      register: result
      failed_when: result.stat.exists == False

    - name: "ON RPKICACHE {{ inventory_hostname }} @ {{ ansible_host }}: Create Routinator config file"
      copy:
        dest: /root/.routinator.conf
        content: |
          repository-dir = "/tmp"
          tal-dir = "/root/.rpki-cache/tals/"
          log-level = "info"
          log = "stderr"
          listen-http = ["0.0.0.0:9556"]
          refresh = 60

  - block:
    - name: "ON ANSIBLE CONTROLLER: Run the Routinator Docker container on the Routinator host Docker daemon"
      register: result
      docker_container:
        name: routinator
        image: nlnetlabs/routinator:latest
        network_mode: host
        ports:
          - "{{ routinator_port }}:{{ routinator_port }}"
          - 9556:9556
        volumes:
          - /etc/routinator/tals/arin-rfc7730.tal:/root/.rpki-cache/tals/arin.tal
          - /root/.routinator.conf:/root/.routinator.conf

    - name: "ON ANSIBLE CONTROLLER: Check that the Routinator is deployed"
      assert: { that: "result.ansible_facts.docker_container.State.Running" }

    - name: "ON ANSIBLE CONTROLLER: Wait for Routinator to start listening for connections"
      wait_for:
        host: "{{ hostvars['routinator'].ansible_host }}"
        port: "{{ routinator_port }}"
        state: started         # Port should be open
        delay: 0               # No wait before first check (sec)
        timeout: 300           # Stop checking after timeout (sec)
    connection: local
    environment:
      DOCKER_CERT_PATH: "{{ hostvars['routinator'].dm_DOCKER_CERT_PATH }}"
      DOCKER_HOST: "{{ hostvars['routinator'].dm_DOCKER_HOST }}"
      DOCKER_MACHINE_NAME: "{{ hostvars['routinator'].dm_DOCKER_MACHINE_NAME }}"
      DOCKER_TLS_VERIFY: "{{ hostvars['routinator'].dm_DOCKER_TLS_VERIFY }}"
# ROUTER_SERIES=Nokia/Alcatel SROS
# DROPLET_SIZE=s-4vcpu-8gb
- hosts: routers
  tasks:
  - include_vars:
      file: ../playbook-vars.yml

  - block:
    - name: "ON ROUTER {{ ansible_host }}: Install Python for Ansible"
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      register: output
      changed_when: output.stdout != ""
    
    - name: "ON ROUTER {{ ansible_host }}: Install Socat"
      raw: test -e /usr/bin/socat || (apt -y update && apt install -y socat)
    
    - name: "ON ROUTER {{ ansible_host }}: Forward port {{ router_port_internal }} to port {{ router_port_external }}"
      shell: "cd /tmp; nohup socat TCP-LISTEN:{{ router_port_external }},fork TCP:127.0.0.1:{{ router_port_internal }}"
      async: 2592000 # keep the background process running for at most a month!
      poll: 0

  - block:
    - name: "ON ANSIBLE CONTROLLER: Private Docker registry login ({{ registry_user }}@{{ registry_fqdn }})"
      docker_login:
        registry: "{{ registry_fqdn }}"
        username: "{{ registry_user }}"
        password: "{{ registry_pass }}"

    - name: "ON ANSIBLE CONTROLLER: Run the router using docker-compose up locally but connecting to the Docker daemon on the router host"
      docker_container:
        name: router
        image: "{{ registry_fqdn }}/nlnetlabs/{{ component_name }}:{{ component_version }}"
        network_mode: host
        privileged: true
        command: "--username {{ router_user }} --password {{ router_pass }}"

    - name: "ON ANSIBLE CONTROLLER: Private Docker registry logout"
      docker_login:
        registry: "{{ registry_fqdn }}"
        state: absent          # logout

    - name: "ON ANSIBLE CONTROLLER: Wait for router Docker container to become healthy"
      command: docker ps
      register: results
      until: results.stdout_lines[1] | regex_search('\(healthy\)')
      delay: 10
      retries: "{{ router_healthcheck_retries }}"

    connection: local
    environment:
      DOCKER_CERT_PATH: "{{ hostvars[inventory_hostname].dm_DOCKER_CERT_PATH }}"
      DOCKER_HOST: "{{ hostvars[inventory_hostname].dm_DOCKER_HOST }}"
      DOCKER_MACHINE_NAME: "{{ hostvars[inventory_hostname].dm_DOCKER_MACHINE_NAME }}"
      DOCKER_TLS_VERIFY: "{{ hostvars[inventory_hostname].dm_DOCKER_TLS_VERIFY }}"

  # Note: Run with ANSIBLE_PARAMIKO_HOST_KEY_AUTO_ADD=True to avoid Paramiko SSH error authenticity of host can't be
  # established. It seems to only be configurable from environment variables set BEFORE Ansible runs, or in ansible.cfg,
  # and Paramiko SSH seems to read known_hosts files BEFORE the Ansible playbook is executed, so we can't write logic in
  # this playbook to change the Paramiko behaviour or to supply the missing host key.
  - block:
    - name: "ON ROUTER {{ ansible_host }}: ENABLE PORT 1/1/1 (user: {{ router_user }}, pass: {{ router_pass }}, port: {{ router_port_external }}"
      sros_config:
        lines: "configure port 1/1/1 no shutdown"
    
    - name: "ON ROUTER {{ ansible_host }}: ENABLE ROUTER OUTBOUND CONNECTIVITY VIA PORT 1/1/1"
      sros_config:
        lines:
          - "configure router interface \"out\" port 1/1/1"
          - "configure router interface \"out\" address 192.168.76.9/24"
          - "configure router interface \"out\" ip-helper-address 192.168.76.2"
          - "configure router \"Base\" static-route-entry 0.0.0.0/0 next-hop 192.168.76.2 no shutdown"

    - name: "ON ROUTER {{ ansible_host }}: ENABLE RPKI ORIGIN VALIDATION VIA ROUTINATOR @ {{ routinator_ip }}:{{ routinator_port }}"
      sros_config:
        lines:
          - "configure router \"Base\" origin-validation rpki-session {{ routinator_ip }} port {{ routinator_port }}"
          - "configure router \"Base\" origin-validation rpki-session {{ routinator_ip }} no shutdown"

    - name: "ON ROUTER {{ ansible_host }}: WAIT FOR CONNECTION ESTABLISHED TO THE ROUTINATOR"
      tags: checks
      sros_command:
        provider: "{{ provider }}"
        commands: show router origin-validation rpki-session
        wait_for: result[0] contains established
      register: result

    - debug: var=result.stdout_lines
      tags: checks

    - name: "ON ROUTER {{ ansible_host }}: SHOW RPKI DATABASE"
      tags: checks
      sros_command:
        provider: "{{ provider }}"
        commands: show router origin-validation database summary
      register: result

    - debug: var=result.stdout_lines
      tags: checks

    when: hostvars[inventory_hostname].dm_tags.find(component_name) != -1
    connection: local
    vars:
      router_ip: "{{ ansible_host }}"
      routinator_ip: "{{ hostvars['routinator'].ansible_host }}"
      provider:
        host: "{{ ansible_host }}"
        username: "{{ router_user }}"
        password: "{{ router_pass }}"
        port: "{{ router_port_external }}"
    module_defaults:
      sros_config:
        provider: "{{ provider }}"

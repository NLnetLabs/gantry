# DROPLET_SIZE=s-1vcpu-1gb
- hosts: localhost
  tasks:
  - name: "ON LOCALHOST: Determine IP of Routinator host"
    changed_when: False
    command: "docker-machine ip {{ routinator_machine }}"
    register: results
  - set_fact:
      routinator_ip: "{{ results.stdout }}"

  - name: "ON LOCALHOST: Inform Ansible of Routinator host"
    changed_when: False
    add_host:
      hostname: "{{ routinator_ip }}"
      group: routinator

  - name: "ON LOCALHOST: Get Docker TLS connection details from Docker Machine"
    changed_when: False
    shell: "docker-machine env --shell bash {{ routinator_machine }}"
    register: results
  - set_fact:
      docker_cert_path: "{{ results.stdout | regex_search(cert_path_regexp,'\\1') | first }}"
      docker_host: "{{ results.stdout | regex_search(host_regexp,'\\1') | first }}"
    vars:
      cert_path_regexp: 'DOCKER_CERT_PATH=\"([^"]+)'
      host_regexp: 'DOCKER_HOST=\"([^"]+)'

  - name: "ON LOCALHOST: Get Docker SSH connection details from Docker Machine"
    changed_when: False
    shell: "docker-machine inspect {{ routinator_machine }}"
    register: results
  - set_fact:
      docker_ssh_key: "{{ results.stdout | from_json | json_query('Driver.SSHKeyPath') }}"

- hosts: routinator
  remote_user: root
  vars:
    ansible_ssh_private_key_file: "~/.docker/machine/machines/{{ routinator_machine }}/id_rsa"
    ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  tasks:
  - name: "ON ROUTINATOR HOST: Install Python for Ansible"
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
    register: output
    changed_when: output.stdout != ""

  - name: "ON ROUTINATOR HOST: Create the tals directory"
    file:
      path: /etc/routinator/tals
      state: directory

  - name: "ON ROUTINATOR HOST: Download the tal file"
    get_url:
      url: https://www.arin.net/resources/manage/rpki/arin-rfc7730.tal
      dest: /etc/routinator/tals/arin-rfc7730.tal

  - name: "ON ROUTINATOR HOST: Create Routinator config file"
    copy:
      dest: /root/.routinator.conf
      content: |
        repository-dir = "/tmp"
        tal-dir = "/root/.rpki-cache/tals/"
        log-level = "info"
        log = "stderr"

- hosts: localhost
  environment:
    DOCKER_CERT_PATH: "{{ docker_cert_path }}"
    DOCKER_HOST: "{{ docker_host }}"
    DOCKER_MACHINE_NAME: "{{ router_machine }}"
    DOCKER_TLS_VERIFY: 1
  tasks:
  - name: "ON LOCALHOST: Query Docker daemon info"
    shell: docker info
    register: result

  # - name: "ON LOCALHOST: Check Docker daemon is remote"
  #   tags: checks
  #   assert: { that: "result.stdout.find('Name: ' router_machine) != -1" }

  - name: "ON LOCALHOST: Run the Routinator using docker-compose up"
    # environment:
    #   ROUTINATOR_PORT: "{{ routinator_port }}"
    # docker_service:
    #   project_src: .
    #   state: present
    #   services: "{{ routinator_service }}"
    docker_service:
      project_name: gantry
      definition:
        version: '2'
        services:
          routinator:
            container_name: routinator
            image: nlnetlabs/routinator:latest
            network_mode: host
            ports:
              - "{{ routinator_port }}:{{ routinator_port }}"
            volumes:
              - /etc/routinator/tals/arin-rfc7730.tal:/root/.rpki-cache/tals/arin.tal
              - /root/.routinator.conf:/root/.routinator.conf

  - name: "ON LOCALHOST: Check that the Routinator is deployed"
    tags: checks
    assert: { that: "routinator.routinator.state.running" }

  - name: "ON LOCALHOST: Wait for Routinator to start listening for connections"
    tags: checks
    wait_for:
      host: "{{ routinator_ip }}"
      port: "{{ routinator_port }}"
      state: started         # Port should be open
      delay: 0               # No wait before first check (sec)
      timeout: 300           # Stop checking after timeout (sec)

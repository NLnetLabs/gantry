---
- block:
  - name: "INSTALL PYTHON FOR ANSIBLE"
    raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
    register: result
    changed_when: result.stdout != ""

  - name: "INSTALL SOCAT"
    raw: test -e /usr/bin/socat || (apt -y update && apt install -y socat)
    register: result
    changed_when: result.stdout != ""

  - name: "CHECK IF SOCAT HAS PORT {{ router_port_external }} OPEN"
    shell: "ss -tp state listening sport = :{{ router_port_external }} | grep socat"
    register: result
    ignore_errors: yes

  - name: "SHOW THAT SOCAT IS ALREADY RUNNING"
    debug:
      msg: "Socat is already forwarding from port {{router_port_external}} so no need to run it again"
    when: result is succeeded

  - name: "FORWARD PORT {{ router_port_internal }} TO PORT {{ router_port_external }}"
    shell: "cd /tmp; nohup socat TCP-LISTEN:{{ router_port_external }},fork TCP:127.0.0.1:{{ router_port_internal }}"
    async: 2592000 # keep the background process running for at most a month!
    poll: 0
    when: result is failed

- block:
  - name: "PRIVATE DOCKER REGISTRY LOGIN ({{ registry_user }}@{{ registry_fqdn }})"
    docker_login:
      registry: "{{ registry_fqdn }}"
      username: "{{ registry_user }}"
      password: "{{ registry_pass }}"

  - name: "RUN THE ROUTER DOCKER CONTAINER IN THE DOCKER DAEMON ON THE ROUTER HOST"
    docker_container:
      name: router
      image: "{{ registry_fqdn }}/{{ registry_repo }}/{{ component_name }}:{{ component_version }}"
      network_mode: host
      privileged: true
      command: "--username {{ router_user }} --password {{ router_pass }} --trace"

  - name: "PRIVATE DOCKER REGISTRY LOGOUT"
    docker_login:
      registry: "{{ registry_fqdn }}"
      state: absent          # logout

  - name: "WAIT FOR ROUTER DOCKER CONTAINER TO BECOME HEALTHY"
    command: docker ps
    register: result
    until: result.stdout_lines[1] | regex_search('\(healthy\)')
    delay: 30
    retries: "{{ router_healthcheck_retries }}"

  connection: local
  environment:
    DOCKER_CERT_PATH: "{{ hostvars[inventory_hostname].dm_DOCKER_CERT_PATH }}"
    DOCKER_HOST: "{{ hostvars[inventory_hostname].dm_DOCKER_HOST }}"
    DOCKER_MACHINE_NAME: "{{ hostvars[inventory_hostname].dm_DOCKER_MACHINE_NAME }}"
    DOCKER_TLS_VERIFY: "{{ hostvars[inventory_hostname].dm_DOCKER_TLS_VERIFY }}"
